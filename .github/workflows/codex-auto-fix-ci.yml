name: Auto Fix CI Failures (Codex)

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

concurrency:
  group: codex-auto-fix-ci-${{ github.event.workflow_run.id }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  actions: read
  issues: write
  id-token: write

jobs:
  auto-fix:
    if: |
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.pull_requests[0] &&
      !startsWith(github.event.workflow_run.head_branch, 'codex-auto-fix-ci-')
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Determine PR context
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const prs = context.payload.workflow_run.pull_requests || [];
            if (!prs[0]) { core.setFailed('No PR context'); return; }
            core.setOutput('number', prs[0].number);

      - name: Resolve checkout ref and push strategy
        id: resolve_ref
        uses: actions/github-script@v7
        with:
          script: |
            const prs = context.payload.workflow_run.pull_requests || [];
            if (!prs[0]) { core.setFailed('No PR context'); return; }
            const prNumber = prs[0].number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            const isFork = pr.head.repo.full_name !== pr.base.repo.full_name;
            const checkoutRef = isFork ? `refs/pull/${prNumber}/merge` : context.payload.workflow_run.head_branch;
            core.setOutput('checkout_ref', checkoutRef);
            core.setOutput('is_fork', String(isFork));
            core.setOutput('head_branch', pr.head.ref);
            core.setOutput('base_branch', pr.base.ref);
            core.setOutput('can_push_directly', String(!isFork));

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.resolve_ref.outputs.checkout_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git identity
        run: |
          git config --global user.email "codex[bot]@users.noreply.github.com"
          git config --global user.name "codex[bot]"

      - name: Create fix branch
        id: branch
        run: |
          BRANCH_NAME="codex-auto-fix-ci-${{ github.event.workflow_run.head_branch }}-${{ github.run_id }}"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Get CI failure details
        id: failure_details
        uses: actions/github-script@v7
        with:
          script: |
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });

            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });

            const failedJobs = jobs.data.jobs.filter(job => job.conclusion === 'failure');

            let errorLogs = [];
            for (const job of failedJobs) {
              const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                job_id: job.id
              });
              errorLogs.push({
                jobName: job.name,
                logs: logs.data
              });
            }

            return {
              runUrl: run.data.html_url,
              failedJobs: failedJobs.map(j => j.name),
              errorLogs: errorLogs
            };

      - name: Install Codex CLI
        run: npm install -g @openai/codex

      - name: Write CI failure JSON
        env:
          CI_FAILURE_JSON: ${{ toJSON(fromJSON(steps.failure_details.outputs.result)) }}
        run: |
          node -e "require('fs').writeFileSync('.ci-failure.json', process.env.CI_FAILURE_JSON)"

      - name: Run Codex to repair CI issues
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Attempting auto-fix using Codex..."
          codex exec "Read .ci-failure.json to understand the lint/type/build failures. Apply minimal, safe edits to fix:\n- ESLint violations\n- TypeScript type errors\n- Next.js build errors\nKeep changes tightly scoped. Do not refactor unrelated code. Maintain existing formatting and comments."

      - name: Validate after Codex edits (non-blocking)
        run: |
          npm run lint || true
          npm run typecheck || true
          npm run build || true

      - name: Check Vercel preview deployment (optional)
        if: ${{ env.VERCEL_TOKEN != '' && github.event.workflow_run.event == 'pull_request' }}
        run: |
          echo "Checking Vercel preview status (if a deployment exists)..."
          npm i -g vercel@latest
          # Attempt to fetch latest deployment for the PR branch
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          vercel ls --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" --confirm | head -n 50 | cat || true

      - name: Commit and push changes (if any) to PR head branch
        id: push_result
        env:
          CAN_PUSH_DIRECTLY: ${{ steps.resolve_ref.outputs.can_push_directly }}
          HEAD_BRANCH: ${{ steps.resolve_ref.outputs.head_branch }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "chore(ci): auto-fix lint/type/build issues via Codex"
            if [ "${CAN_PUSH_DIRECTLY}" = "true" ]; then
              if git push origin "${HEAD_BRANCH}"; then
                echo "pushed_directly=true" >> $GITHUB_OUTPUT
              else
                echo "pushed_directly=false" >> $GITHUB_OUTPUT
                FIX_BRANCH="codex-auto-fix-ci-${HEAD_BRANCH}-${GITHUB_RUN_ID}"
                git checkout -b "$FIX_BRANCH"
                git push origin "$FIX_BRANCH"
                echo "fix_branch=$FIX_BRANCH" >> $GITHUB_OUTPUT
              fi
            else
              echo "pushed_directly=false" >> $GITHUB_OUTPUT
              FIX_BRANCH="codex-auto-fix-ci-${HEAD_BRANCH}-${GITHUB_RUN_ID}"
              git checkout -b "$FIX_BRANCH"
                git push origin "$FIX_BRANCH"
              echo "fix_branch=$FIX_BRANCH" >> $GITHUB_OUTPUT
            fi
          else
            echo "No changes from Codex."
            echo "pushed_directly=none" >> $GITHUB_OUTPUT
          fi

      - name: Comment back on PR with auto-fix branch link
        uses: actions/github-script@v7
        env:
          PUSHED_DIRECTLY: ${{ steps.push_result.outputs.pushed_directly }}
          HEAD_BRANCH: ${{ steps.resolve_ref.outputs.head_branch }}
          BASE_BRANCH: ${{ steps.resolve_ref.outputs.base_branch }}
          FIX_BRANCH: ${{ steps.push_result.outputs.fix_branch }}
        with:
          script: |
            const prs = context.payload.workflow_run.pull_requests || [];
            if (!prs[0]) { core.info('No PR context found; skipping comment'); return; }
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = prs[0].number;
            const pushedDirectly = process.env.PUSHED_DIRECTLY;
            let body;
            if (pushedDirectly === 'true') {
              body = [
                '## ðŸ¤– CI Auto-Fix (Codex) Applied',
                '',
                `Changes were pushed directly to the PR head branch \`${process.env.HEAD_BRANCH}\`.`,
                '',
                `_Run ID: ${context.runId}_`
              ].join('\n');
            } else if (pushedDirectly === 'false') {
              const compareUrl = `https://github.com/${owner}/${repo}/compare/${process.env.HEAD_BRANCH}...${process.env.FIX_BRANCH}?quick_pull=1`;
              body = [
                '## ðŸ¤– CI Auto-Fix (Codex) Available',
                '',
                `Branch \`${process.env.FIX_BRANCH}\` with fixes has been pushed to this repo (fork PR or protected branch).`,
                '',
                `[**â†’ Create pull request**](${compareUrl})`,
                '',
                `_Run ID: ${context.runId}_`
              ].join('\n');
            } else {
              body = [
                '## ðŸ¤– CI Auto-Fix (Codex) Attempted',
                '',
                'No file changes were necessary based on the reported CI errors.',
                '',
                `_Run ID: ${context.runId}_`
              ].join('\n');
            }
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
